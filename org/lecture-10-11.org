# Note: 'C-c C-e d' compiles this to a LaTeX document automagically in org mode
# Note: 'C-c C-x C-l' provides in-line representation of LaTeX equations in
#        org mode, provided you have imagemagick or other image generators

* Lecture 10 - Game, Set and Maude

Maude can help express semantics by specifying 'sorts' (Syntactic Categories)
and Operations, which would be things like the phrase 'plus' to define that
something happens between two Numerals.  In a basic form:

op 0 : -> Num [ctor] .
op Inc : Num -> Num [ctor] .
op plus : Num Num -> Num .

The formatting shows the inputs and outputs for each operation.  The first, '0'
(zero), takes no input and has the output of a 'Num' (Base-10 Number, in this
instance), making it a constant instead of a variable.  The '[ctor]' defines
the operation as a 'constructor' as the statement generates data and therefore
constructs it.

The second statement is the format that will be used for an 'Increment'
capability.  We can see that there is a Num as an input, and the operation
creates a Num for an output.  This is also a constructor as it would
theoretically be able to generate all Numbers recursively.  If you have notes
made from the lectures, Inc(X) would be the same as 'Succ(X).'  I just prefer
the word 'Increment' as it is similar to other programming languages.

The third statement is the basic information for implementing addition in
Maude, accepting two inputs that are a part of the Num category and providing
a Num as an output.

The term '[ctor]' stands for 'Constructor' in Maude.  This flags the operation
as required for the sort as it forms the basis of other operations.
Essentially, most constants will be a constructor because they are used to
build sub-terms.  'Inc' is also a constructor as it will be used to build the
list of numbers by nesting Inc statements, like so:

Inc(Inc(Inc(0) ) ) == '3'

** Inductive definitions and Terms
Within the information above, we have a couple of terms.  Here is what we can
work out so far:

'0' is a term as it is a constant.
If 'T' is a term within sort 'Num,' then Inc(T) would be a term too.
If 'T1' and 'T2' are terms, then plus(T1, T2) is a term too.

We can see that because Inc(T) and plus(T1, T2) are built from other terms,
they are known as 'sub-terms.'

** Maude is stacked
sorts Bool Stack .
ops true false : -> Bool [ctor] .
op empty : -> Stack [ctor] .
op not   : Bool -> Bool .
# 'not' can be applied recursively:  not(not(true) ) == true
op push  : Bool Stack -> Stack [ctor] .
# Examples include: 'push(true, empty)' and 'push(false, push(true, empty) )'
op pop   : Stack -> Stack .
# 'pop(push(false, empty) )'
eq pop(push(B, S) ) = S .

The above code probably isn't correct, but you can at least see how a Stack may
be implemented in Maude.  There is a constant to define a stack, known as
'empty,' there is a 'not' operation to flip the value of a Boolean and the two
functions 'pop' and 'push' which remove an element from the stack or add an
element, respectively.  There is an equation to make make computation faster
for the case of pop(push(B, S) ).

As a very basic outline, Maude allows us to give names for concepts (such as an
empty stack) as well as operations (pop() and push() ).

** Maude vs. John Hancock
Within Maude, we are able to write a list of 'Sorts' (such as Stack, or Num) as
as well a list of Operations(Inc() and plus(), for example).  This gives us
something known as a 'Maude Signature.'  Written a little more formally, a
Maude Specification (Signature) gives:

(S, O) where:
S = A set of Sort Names, and
# {Num}; {Bool, Stack}
O = A set of Operation Names, and their input/output types

We can split the various types found within a Maude Specification into
'families' which are essentially all things which have the same input/output
types.  This is formalised with the form 'O    for w ∈ S, s ∈ S'
                                           w,s

So if we are to analyse the 'Num' sort, we would have this:

# All operations with nothing as an input and a Num as an output
O         = {0}
 [ ], Num

# All operations with a Num as an input and a Num as an output
# Note that 'inc' and 'succ' will do the same thing, but that is not required
# for them to be in a family together
O         = {Inc, Succ}
 Num, Num

# All operations with two Num's as an input and a Num as an output
# We have not specifically defined 'mult' and 'divi' but you can fairly easily
# guess how to using the semantics of 'plus' as a template
O             = {plus, mult, divi}
 Num Num, Num

# For any other amount of inputs, with a Num as an output, make it an empty set
O       = { }
 w, Num


We can do the same thing for the Stack sort too - it's constants will help
explain that even though values can be part of the same family, they do not
have to equal the same thing (true and false, for instance):

O           = {True, False}
 [ ], Bool

O           = {Empty}
 [ ], Stack

O           = {Not}
 Bool, Bool

O                  = {push}
 Bool Stack, Stack

O             = {pop}
 Stack, Stack

# All other inputs and outputs
O     = { }
 w, s


** Formalising Signatures
Within this module, the icon which will tell us that we are talking about a
signature will be 'sigma' (Σ).  Therefore, if we use our current knowledge from
before, Σ = (S, O).  In order to properly define a signature, we need to fill
in all of the available terms into the format that is seen above, which follows
'o ∈ O    '  (o exists within O    )
       w,s                      w,s

We define the terms of sort S ( (T )s ) for a couple of cases:
                                  Σ

'o ∈ O      ' (Constants within the sort)
       [ ],s

'o ∈ (T  )s ' (Terms with only one input)
        Σ

'o ∈ O      ' (Terms with multiple inputs where w = (s1, s2, ..., sN) )
       w,s
    Term 'Ti' ∈ (T  )si (where i = (i = 1, 2, ..., N) )
                   Σ
# As an example of multiple terms, the term 'push(true, empty)' must be valid
#   within the 'Stack' sort (and it is) as 'push' takes a bool and a stack
#   which outputs a stack.  As 'true' and 'empty' are valid terms in 'bool' and
#   'stack' respectively, 'push(true, empty)' is a valid 'stack.'

* Lecture 11 - Maude Lists
So from what we can gather, A Maude Specification is a:

List of Terms (and)
Signature(s) (List of Operations)

** A basic list in Maude
sort List
op empty  :          -> List
op add    : Num List -> List
op length :     List -> Num

The signature for the above would be:

S = {List, Num}

O         = {0}
 [ ], Num

O         = {empty}
 [ ], List

O         = {succ}
 Num, Num

O              = {add}
 Num List, List

O         = {length}
 List, Num

O            = {plus}
 Num Num, Num

O   = { }
 w,s

And this is all well and good.  We should also remember that a Signature is a
list of 'Sort Names' (List and Num, in the above example) and a list of
Operations (0, empty, add, length, plus and succ - in the above example).
These signatures are written in short-hand as the 'sigma' symbol (Σ).
Signatures are for defining all possible implementations of the 'Abstract
Datatypes' (ADT).  Any potential implementation is known as a 'Σ-Model' or
'Σ-Algebra.'  These models are simply a family of sets which conform to the
signature.  With this in mind:

Ms -> (For each sort in the Model (s ∈ S) )
  M     || M
   Num      List
# The asterisk below denotes an array of elements that are sort 'Num'
  M     = M   *
   List    Num

These models can also be known as 'Carrier Sets' for 'S.'  They provide a
concrete representation of the signatures involved (an example could be 32-bit
numbers in a different programming language).

** Models and potential representations
The interesting (and probably confusing) thing about defining a Σ-Model is that
so long as the input is 'valid' and follows the signature's guidelines, it is a
correct representation.  As an example for how confusing it can be, it would
make sense that the operation '0' within the sort 'Num' would equal to the
actual number zero.  We could, however, write the function linked with this
operation to state that the value is actually '23' and it would still be valid
according to the operation as '23' is part of the sort 'Num.'

Another example would be defining the empty set of a List as the value
'{2, 3, 7}' instead of simply '{ }' and as it is still a List, it would work,
although not as normal people would expect.

** Formalising Models
For any Signature (Σ = (S, O) ), there is at least one Σ-Model which can
satisfy all of the requirements.  A valid Σ-Model will be written in the form
'T '.  To explain this in a simpler manner:
  Σ

(T )  ==> The set of terms within sort 'S'
  Σ S

(T )  = o ∈ (T )    ('o' must be within the model - this is usually constants)
  Σ o         Σ S
# An example being (T )      = empty
#                    Σ empty

(T )                =
  Σ w1 w2 ... wN, S

(T ) (T )   x (T )   x ... x (T )   -> (T )
  Σ    Σ w1     Σ w2           Σ wN      Σ S
# Each of the inputs must be able to be linked into the final output

The final statement in the above can be written as a function, like so:

(T ) (w1, w2, ..., wN) = O(w1, w2, ..., wN)
  Σ O
# An example of this in action would be (T )   (5, 3) = add(5, 3) = 8
#                                         Σ add

** Lazy Programming
One of the ways to test whether a model works can be to use the
"Lazy Programmer's Model."  This is a model where the value for each term is
zero.  This is because the 'LPM' has only one term - 'zero.'  As an example:

'For any Signature Σ = (S, O):'
  For any s ∈ S(LP ) = 0
                  Σ s
  For o ∈ O      (LP ) = 0
           [ ], S   Σ o
  For o ∈ O            (LP ) (t1, ..., tN) = 0
           t1 ... tN, S   Σ o
    t ∈ (LP )  = {0}
     N     Σ Si
    # 'Si' stands for any intermediate State that the program is in whilst
    # working through the multitude of inputs found in 'tN'

** Lecture Overview
Hopefully we are aware that there are concepts known as 'Signatures' which help
define the look of a program by stating the operation's required inputs and
outputs ('plus' requires two 'Num' inputs and provides one 'Num' output, for
instance).  We have also gone through defining a Σ-Model by the data that is
within each family of inputs/outputs ('plus', 'mult' and 'divi' all take two
Num inputs and provide one Num output), as well as formalising what is required
in order to make a complete Σ-Model (by using (TΣ)S to help outline the terms
and what families they are in) as well as the potential representations and the
viable confusion we may have if the language's creator decides to play a sick
joke and make 'empty' lists/sets have values in to begin with or make '0'
actually mean 13, or something.
