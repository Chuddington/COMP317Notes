# Note: 'C-c C-e d' compiles this to a LaTeX document automagically in org mode
# Note: 'C-c C-x C-l' provides in-line representation of LaTeX equations in
#        org mode, provided you have imagemagick or other image generators

* Lecture 4 - It's one hell of a State
** Recap from last lecture
So we've created definitions for our syntactic cateogy known as <Expression>.
These are:

<Expression> ::= <Numeral> | <Variable> | <Expression> <Operator> <Expression>
<Expression> ::= !<Expression> | -<Expression> | ...
# Where you can fill in the various Operators and other personally defined
# syntax

And this is all well and good, because so long as we follow the semantics we
have defined, we can have functions which morph the syntactic input into some
form of output.

We also touched upon State Tables and how they store each variable name, and
the value for each variable.  Which leads us onto...

** Semantics 2-0-2: Basic Maths
Unless otherwise mentioned and updated, the following information will use the
State Table 'S' which is defined as:

|'x|'y|'z|
|  |  |  |
| 0| 3| 4|

So write that down somewhere and keep it for looking back and forth at.  Say we
have a simple line of code which attaches, or assigns, a number to a variable
using a second variable as a base:

'x := 'y + 2;

now if you look at the value of 'y in the State Table 'S', we can see that this
line of code means 3+2 = 5.  We know that this is the answer, but how do we go
about showing computers that this is the answer from this list of strings?
Find out, after the lecture.

*** Planet's funniest functions
We can create a function for <Expression>s which define all possible outcomes
for any state.  This base rule has the following look:

〚E〛        (S)
   Expression

Now we know that there is a function to take any Expression with a State, but
we need to write more functions to help the computer decide what to do with the
Expression.  Our first definition of an <Expression> is that it can be a
<Numeral>, so a function which shows this transformation from <Expression> to
<Numeral> would be:

〚N〛        (S) = 〚N〛      (S)
   Expression         Numeral
〚13〛       (S) = 〚13〛     (S) = 13
   Expression          Numeral

This is a nice simple Function which simply changes the Category of the varible
from an <Expression> into a <Numeral>.  'N' simply stands for any value which
can be perceived as a <Numeral> - '13' or '91', for example.  As a formal
definition: "The integer that results from evaluating Expression N as a
Numeral."  This is great as we can now use the information from the first
week's lectures and the first problem sheet to show that it is a valid number
and that this trail of thought is possible.  Moving onto Variables!

〚V〛        (S) = S(V)
   Expression
〚'y〛        (S) = S('y) = 3
    Expression

Hopefully the above makes a little sense.  What we are doing here is we have
any variable 'V' as an <Expression> (so it could be 'x, 'y or 'z in our S)
within the State S, and we transform it to say that we are after the value that
the 'V' represents.  In the miniature example above, we can see that 'y, in
it's Expression format, transforms into a 'Table Look-up' of 'y against the
State S - this is the value of 3.  Now we move onto the operations... addition,
more specifically.

〚E1 + E2〛        (S)
         Expression
〚5 + 7〛          (S)
        Expression

This is the first function we see that could take a bit of work on our end in
order to understand.  Everything within the double square brackets is a string,
so for now at least the computer wouldn't know that they are supposed to add
5 and 7 together to get 12.  Addition can be formally defined as:

The Result of adding:
  The result of evaluating Expression E1 in State S (〚5〛        (S) )
                                                        Expression
  The result of evaluating Expression E2 in State S (〚7〛        (S) )
                                                        Expression

This blocky way of formalising what addition means helps us to write the
output of the function, which is written like so:

〚E1 + E2〛        (S) = 〚E1〛        (S) + 〚E2〛        (S)
         Expression          Expression         Expression
〚5 + 7〛        (S) = 〚5〛        (S) + 〚7〛         (S)
       Expression        Expression         Expression

But wait!  We can see that the right side is comprised of Functions that we
have already defined, as E1 and E2 can be considered numerals in this instance.
As such:

〚E1 + E2〛        (S) = 〚E1〛      (S) + 〚E2〛     (S)
         Expression          Numeral         Numeral
〚5 + 7〛        (S) = 〚5〛     (S) + 〚7〛      (S)
       Expression        Numeral         Numeral

Which will then work out that 5 + 7 is 13.  Notice in the above that we are
using '+' in our definitions of what the functions do (the right side of the
equation).  The reason this works is because it is not being read as a
character like in the input (the "E1 + E2" part), but instead as an operator,
so the machine can add the results together.

You can implement other operator symbols in the same way.  So long as you are
using symbols the machine interprets as operations in the function definitions,
you can technically have any symbol as an input to symbolise this.  As an
example, you might be aware that the 'modulo' operation is often seen as the
percentage sign but if added a definition to explain that my modulo sign was
actually "/~", I would still probably have to use the percentage sign when I
build my functions, like so:

〚E1 /~ E2〛        (S) = 〚E1〛         (S) % 〚E2〛        (S)
          Expression         Expression         Expression

It just depends on the compiler or interpreter you use.  I'd take this with a
pinch of salt though - I could be wrong about this bit.

Performing the negative of <Expression>s is fairly simple.  The function is
written in a similar manner to this:

〚-E〛        (S) = 0 - 〚E〛        (S)
    Expression            Expression
〚-'z〛        (S) = 0 - 〚'z〛        (S) = -4
     Expression             Expression

To make sense about the above, the numeral 0 has the value of the Expression
subtracted from it.

*** Sidetrack: Trying out multiple Expressions
Say that we want to understand what is happening when we try and evaluate this
line of code:

2 * 'x + 'y;

Depending on how you read this line, the answers would be different.  We have
the following answers:

(2 * 'x) + 'y = 0 + 3 = 3;
2 * ('x + 'y) = 2 * 3 = 6;

This could cause confusion if the computer doesn't know in which hierarchy the
computer should process the expressions.  For now, assume that the largest
expressions are on the left side.  Here are the functions we arrive at:

# The full expression in all it's unmodified glory
〚2 * 'x + 'y〛        (S) =
             Expression
# We've not officially defined multiplication, but it is visually similar to +
# Therefore, E1 is the expression on the left side, E2 the 'y variable
〚2 * x〛          + 〚'y〛         (S) =
       Expression       Expression
# E1 has been split to it's two components with the computer knowing you wish
# to multiply the two expressions together.  E2 is now in the look-up syntax
〚2〛          X 〚'x〛          + S('y) =
   Expression       Expression
# Our syntax earlier has defined that the '2' can be a numeral, so the category
# has changed.  the 'x variable is now ready for a look-up as well
〚2〛          X S('x)          + S('y) =
   Numeral
# All semantics have been solved by turning the numeral into a number that can
# be worked with mathematically.  Variable look-ups have been completed, too
2 X 0 + 3 =
# Giving the answer:
3

*** Protection Brackets
If the sidetrack was read, we had this fairly ambigious maths problem of:

2 * 'x + 'y;

and that it was tricky to understand what answer it wanted.  We can remove this
confusion through the use of brackets, and we work out the expressions inside
the brackets first.  So technically we're changing the input to something like
this:

(2 * 'x) + 'y;

There's just one problem with this though - our semantics haven't defined
brackets so they currently mean nothing to the language we're building.  This
is a simple matter if we add to our syntactic category and add a function to
do stuff with the brackets:

# I didn't wanna write everything in the <Expression> category, so ... will do
<Expression> ::= ... | ( <Expression> )

〚 (E) 〛        (S) = 〚E〛        (S)
       Expression        Expression

In the Syntactic Category, it simply adds the capability of <Expression>s being
contained within brackets - easy enough.  What the function formally does is
"For any Expression E within brackets for any State S, treat this as an
Expression E in the State S."  A quick informal breakdown of the statement
gives this kind of information:

 2 -> Numeral  -> Expression
'x -> Variable -> Expression
'y -> Variable -> Expression
2 * 'x         -> Expression
2 * 'x + 'y    -> Expression

*** Could you rephrase the question?
There can be some ambiguous things in language and grammars.  An example would
be the above statement we've been going over for a while now.  Without the
brackets we wouldn't have known what to do.  We could write out a function
called 'evaluate' that takes an Expression and a State, which could output an
integer.  It could look like this:

evaluate : Expression x State -> Int
# for any Expression with any state, the output is an integer
evaluate(E, S) = 〚E〛         (S)
                    Expression

The first line has a new look compared to what we have dealt with previously.
It is an actual function declaration (I may have used this term for functions
which have the double square brackets and the equals sign).  It tells you the
name of the function (evaluate), the inputs that the function can take
(An Expression and a State), then tells you the type of output that will be
made (an Integer).  For tangentially related reading, I suggest Page 26 from
this PDF: http://math.uni.lodz.pl/~kowalcr/PPL/HaskellBook.pdf - the syntax is
mildly different but you can pick up the similarities to make sense of the
line.  Also I think it's a line of Maude code for a function declaration so
yeah...  More on that in the near future.

We could also create another function which sorts out the brackets for each
Expression - we could name this 'Disambiguate':

disambiguate   : Expression -> Expression
# and then change the meaning of evaluate to include 'disambiguate'
evaluate(E, S) = 〚disambiguate(E) 〛         (S)
                                   Expression

Such a function could take an expression that is entirely within brackets, and
push a part of the expression out, like so:

disambiguate(2 * 'x + 'y) = (2 * x) + 'y
disambiguate(-'x    + 'y) = (-'x)   + 'y

So for this lecture, we've learnt about how we can create functions to help
define what we can do with the <Expression>s category - such as Operators,
defining some form of grouping through brackets in order to help split
expressions into the layout we want, and dived into how our defined functions
can be broken down into 'simpler' functions which will provide the answers.
In short, we're learning to think more like a machine.
* Lecture 5 - Find the remote; Programme's too long
Now if we all look back a moment and remember how <Program> was defined in
Lecture 3, hopefully it looks something similar to this:

<Program> ::= skip | <Variable> := <Expression> | <Program><Program> |
              if( <BooleanExpression> ) { <Program> } else { <Program> } |
              while( <BooleanExpression> ) { <Program> }

〚P〛      : State -> State
   Program

and if it didn't, consider this the template for the next lecture or two.  We
can see that the program takes a State as input, then outputs a State, from the
second section.  You can also see some common constructs found in programs -
skip (which symbolises 'nothing'), Assigning a value to a variable, Linking
programs together, an if/else clause and a while loop.

This lecture will go through the easier things first and then the last two will
span through this lecture and the next.

** Nothing is a thing, isn't it?
The first capability of the <Program> Syntactic Category is the phrase 'skip'.
This may sound strange to have in a program, this concept of doing nothing, but
it is fairly important.  If you look at our if statement construct, you must
have a program in the else statement too, which is no good if you don't want to
do anything in that section of the clause.  Doing nothing is also used when you
assign tasks to threads - they can cycle and do nothing until a required
variable is accessible, or an array is filled before working on the data.  The
function for creating this desired effect is this:

〚skip〛      (S) = S
      Program

It's that easy.  If you don't want anything to happen, just return the state
that was given as input.

** This is something, though
Now that we have nothing sorted, let's do something about everything else.  The
assignment operation that was briefly shown to you in these notes under Lecture
4 has now appeared once more:

State S:
|'x|'y|'z|
| 0| 3| 4|

'x := 'y + 2;
# Any Variable V and any Expression E, within <Program> limits, with any
# State S
〚V := E〛      (S)
        Program

We will split this up into two main parts - the expression part and what this
means within the program.  This is for understanding and utilising the concepts
we go through by just focusing on the Expression.  For the expression
'V := E,' the output would look like so:

# Output the state S as it is unchanged, except for the variable V, which
# changes the value to whatever 'n' is.  This is the format that the module
# will have for such operations.  It may not be 'official' denotation
S[V <- n]

The following should therefore make sense now we know what the answers should
look like:

S[V <- n](V) = n
S[V <- n](X) = S(X)

The first statement makes sense, as we are changing the value of V to whatever
'n' is - I'll call it 5 for the moment.  So V has it's value changed to 5 then
we are asking for a table lookup to tell us the value of V - the output will be
what 'n' is, which is 5.  The second line still changes the value of V to 5,
but we are asking for a table lookup of the variable 'X.'  We don't directly
know the value of X as we have not changed it within the current state, so the
equation is 'S(X)' due to requiring a table lookup.

Now onto the program and it's representation.  Using what was mentioned above,
we can now state what 〚V := E〛      (S) actually means:
                              Program

〚V := E〛      (S) = T[V <- 〚E〛         (S) ]
        Program                 Expression

What this means is that the expression 'V := E' returns the state 'T' where a
variable 'V' has had it's value changed to whatever the Expression 'E' outputs,
using the State 'S.'  I've used T to symbolise a different state to 'S' in this
example - I may forget later down the line so be aware.  It's to help remove
confusion by giving the target state a different name to other states we use.
You can use S^1, S^2 or anything else, so long as it makes sense to you and
does the same thing as on here.  But enough about that - an example!:

State S:
|'x|'y|'z|
| 2| 2| 3|

'x := 'y + 1;

# Turn the line of code into the correct format:
S['x <- 〚'y + 1〛        (S) ]
                Expression
# Split the expression into the main parts; implement the addition operator
S['x <- 〚'y〛        (S) + 〚1〛         (S) ]
            Expression         Expression
# Convert 'y into a table lookup; convert '1' into a numeral that can be
# operated on
S['x <- S('y) + 1]
# Perform the lookup on the State Table 'S'
S['x <- 2 + 1]
S['x <- 3]

State S (after the operation):
|'x|'y|'z|
| 2| 3| 3|

** Linking Programs and the functions that define it
Now we have defined a variable declaration, we should now write functions which
allow us to link programs together.  This would be the <Program><Program> part
found in the <Program> Syntactic Category.  The function to allow linking of
programs would be this:

# Programs P^1 and P^2 in the state S
〚P^1 P^2〛     (S) = 〚P^2〛      (〚P^1〛     (S) )
         Program           Program      Program

So say we have two variable declarations, which can be read as two programs
linked together.  We will extend the example used in the variable declaration
section earlier in this lecture:

State S:
|'x|'y|'z|
| 2| 2| 3|

'x := 'y + 1;
'y := 'x * 2;

# Convert the programs into the correct format
〚'y := 'x * 2〛     (〚'x := 'y + 1〛      (S) ) =
              Program               Program
# Expand the first program
〚'y := 'x * 2〛     (S['x <- S('y) + 1] ) =
              Program
# Expand second program; define the 1st program's state change 
S['x <- S('y) + 1]['y <- 〚2 * 'x〛         ](S['x <- S('y) + 1] ) =
                                 Expression
# Expand the Expression.  'y is used instead of 'x in the second square
# brackets as it would equal what the code is asking --> y = 2('y + 1)
# We haven't modified 'y yet so it would work.
S['x <- S('y) + 1]['y <- 2 * S('y) + 2]
# Simplify each side through table lookups and following the operations
S['x <- 3]['y <- 6]

So hopefully this all makes sense - we have gone through the steps to
understand how functions would work for some elements of Programs - noteably
the capability of waiting, or doing nothing, Variable declarations and Programs
which take up multiple lines.  The next lecture will include the other main
concepts - the 'if' statement block and the 'while' statement block.  I know
this is a fair amount to take in as there's not much explaining and it is
essentially "Accept this information, you cannot re-word this in any way" but
hopefully the next few lectures are a little more flexible in it's methods of
understanding.

* Lecture 6 - While I have your attention

<Program> ::= skip | <Variable> := <Expression> | <Program><Program> |
              if(<BooleanExpression>) { <Program> } else {<Program>}|
              while( <BooleanExpression> ) { <Program> }

So if we remember, we still have the if statement and the while loop to do.

** Defining the if/else statement block
〚if(BooleanExpression) {Program1} else {Program2}〛(S)
  〚Program1〛(S) if 〚BooleanExpression〛(S) *if BooleanExpression = true*
  〚Program2〛(S) if not 〚BooleanExpression〛(S) *if BooleanExpression = false*

The first line states what the if statement will look like.  This is simple
enough.  The second and third line explains what will happen depending on the
result of the BooleanExpression - Program1 will run if the Boolean turns out to
be true; Program2 will run otherwise.

** Making an example out of the if statement
Have a look at this simple if statement block:

'x := -2;
if('x < 0) {
  'y := -'x;
} else {
  'y := 'x;
}

We can see that the 'y variable has it's value changed to be the absolute value
of 'x, as when 'x is lower than 0, it has it's polarity reversed for 'y.
Written as a function, it takes on the following form:

# Base form
〚if('x<0){'y:=-'x}else{'y:='x}〛(〚'x:=-2〛(S) )
# expand / simplify the variable assignment as done in previous lectures
〚if('x<0){'y:=-'x}else{'y:='x}〛(S['x <- -2] )

# # Evaluate the Boolean Expression
〚'x < 0〛(S['x <- -2] ) =
〚'x〛(S['x <- -2] )     =
S['x <- -2]('x)         = -2
